1. 자바스크립트 : 웹페이지를 조작하기 위해 만들어졌다.

- 웹페이지의 기본 : 데이터 관리

- 변수와 상수 (데이터를 담는 메모리)
변수(값이 변할 수 있는 메모리) : var, let
상수(값이 변할 수 없는 메모리) : const

데이터를 재사용하고, 해당 데이터에 접근하기 위해 필요하다.

- 변수와 상수를 사용하기 위한 단계
    1. 선언 : 변수의 이름을 알려주는 행위 : let, var, const 세가지 키워드를 이용
    2. 할당 : 변수에 데이터를 담아주는 행위 (데이터를 지정된 메모리=변수의 이름 에 저장)

- 변수와 상수의 특징
    중복으로 선언할 수 있는지의 여부(재선언/재할당이 가능한지)
    var : 재선언 가능, 재할당 가능
    let : 재선언 XX, 재할당 가능
    const : 재선언 XX, 재할당 XX

    변수명 지정시 명사로 지정하길 권장


2. 데이터 타입(자료형)

    - 문자열(String) - " " 혹은 ' ' 가능, + 연결 연산자로 문자열 연결 가능

    숫자(Number)
    - 산술연산자 : +, -, *, /, %
        숫자 아닌 다른 데이터 타입으로 산술 연산자 연산 시 NaN(Not a Number) 발생
        "a" * 12 = NaN


    Boolean
    undefined
    null
    symbol
    Bigint
    Object


3. 배열(array), 객체(Object)
    - 여러개의 데이터를 순서와 함께 저장하고 싶을 때 사용하는 저장창고

    let makeArr = ["1", "2", null, undefined, 1, Object]

    배열은 데이터의 저장 순서 = 인덱스(index)

    - index => 요소에 순서를 부여하고, 해당 요소에 접근이 가능하도록 지원

    - array.length : 배열의 길이를 제공

    - array.push() : 배열의 가장 뒤에 데이터 추가(java append와 같음)

    - array.pop() : 배열의 가장 뒤에 있는 데이터 삭제

    - array.includes() : 특정 배열에 주어진 데이터가 포함되어 있는지 확인

    - array.indexOf() : 특정 배열에서 지정된 요소를 찾을 수 있는 첫번째 인덱스 반환

4. 객체(Object)
    const people = ['신세계', 180, 80, 'SSG&INC']
    객체는 키값을 통해 데이터가 무엇에 대한 데이터인지 명시해줄 수 있다.
    객체를 정의시 {}

    let userData = {
        name:'신세계',
        age : 20,
        height : 180,
        weight : 80,
        company : 'SSG&INC'
    }

    객체 안의 데이터들 하나하나를 프로퍼티(property) => key와 value 묶은 것

    객체 프로퍼티(Property에 접근하기)
    객체의 key값에 접근해서 value를 가지고 온다.
    value를 조회 및 갱신할 수 있다.
    Dot notation(점 표기법)
    Bracket notation(괄호 표기법) -> key 값을 넣을 때 userData["name"]과 같이 ""를 사용해서 키값을 표현해줘야 한다.

    객체 메소드(내장 메소드)
    Object.keys() : 객체의 key만을 가져와 keyset 배열을 return
    Object.values() : 객체의 value만 가져와 배열 return


5. 함수(function)
    어떤 기능을 수행하거나 계산을 수행할 수 있는 도구
    입력 데이터(매개변수 혹은 파라미터), 입력데이터를 처리 - logic processor, 결과 데이터(반환 데이터, return 값)
    도구를 활용(함수를 호출)

    function sayHello(){
        console.log('안녕하세요')
    }
    도구를 활용(함수의 호출) : sayHello()

    HTML의 태그에는 부여할 수 있는 속성(property)가 존재한다.
    id, class, 속성, 
    onClick() -> 이벤트드리븐 방식, 이벤트 핸들러가 처리한다.
    해당 태그에 사용자에 의해 클릭 이벤트가 발생했을 때, 할당되어 있는 수식이나 코드를 실행


6. 쿼리셀렉터(querySelector) - 태그 선택
    - JS 내에서 HTML 요소의 객체값을 참ㅁ조할 때 사용하는 기능
    - getElementById()등도 많이 사용

7. 함수의 리턴 (함수 내부에 존재하는 데이터 또는 연산의 결과를 외부로 전달하는 기능)
    return 명령어를 사용
    return 뒤에 오는 데이터를 함수를 호출했던 위치로 전달해 준다.

    const sum = function(){ //익명함수
        let result = 10+10;
        return result;
    }

      const sum = function() => { //화살표 함수 표기법 가능
        let result = 10+10;
        return result;
    }


8. DOM : HTML 문서를 파싱(구성된 요소를 분석하고 의미를 이해하여 활용 ,문장을 이루고 있는 구성 성분을 분해해서 그들 간의 관계를 결정하는 것)하여
         DOM이라는 트리구조 형태의 객체
    DOM Tree(DOM 트리 구조 ) - 요소들을 노드(Node)
    - Document : 문서(document) 노드, DOM 에 진입할 수 있는 진입점 역할
    - HTML : Document를 제외하고 최상위의 위치(root Node) : 하나만 있음
    - head, body, title, idv,.... : 요소(Element) 노드 -> 속성(Property)을 가질 수 있는 유일한 노드
    - src = "...", id ="..." -> 속성 노드(attribute)
    - <p>안녕</p> -> 안녕 이 텍스트 노드(Text Node)이자 childNodedlwk leafNode 이다.

    document.getElementByTagName('p').item[0] -> 문서의 첫번째 p태그
    document.querySelector(.id(#")) -> id를 기반으로 class(.)를 참조
    document.querySelectorAll() -> 배열 형태로 모든 요소를 참조
    document.createElement() -> 새로운 Node 생성. 단 DOM에 추가는 안됨!! 
        -> 생성된 새 Node를 DOM에 붙이고 싶으면 document.appendChild()를 통해 추가해야 한다.
        => document를 활용하여 JS 내부로 각각의 Node들을 참조할 수 있다.

        https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector


9. 반복문

10. for-of(배열에서 주로 사용)
    const arr = [1,2,3,4,5]
    for(let e of arr){
        console.log(e)
    }

    for-in(객체에서 주로 사용)
    const obf = {name:"otter", gender:"male"}

    for(let key in obf){console.log(key)}

11. 스코프, 호이스팅

    scope : 선언된 변수가 어떤 범위까지 유효한지, 어디서나 접근이 가능한지

    scope => 전역 스코프, 지역 스코프

    함수 스코프지역 
    자바스크립트에서 스코프를 생성하는 종류 두 가지
    1. 함수레벨 scope
    2. 블록레벨 scope

    참조 가능한 유효 범위의 경계를 조건문, 반복문을 포함한 코드블럭 {}으로 할지,
    오직 함수의 코드 블럭으로 할지 정해야함.

    자바스크립트는 변수를 사용할 때 해당 스코프 블록의 변수를 먼저 찾음,
        없으면 상위 스코프로 올라가서 처리하고자 하는 변수가 있다면 상위 스코프의 변수를 참조한다. = 스코프 체인

    - 스코프 체인
        자바스크립트는 렉시컬 스코프 원칙(정적 스코프 Static Scope)
        함수를 호출한 곳이 아닌 선언한 곳을 기준으로 스코프를 결정한다.

        처리하는 함수 이름이 같을 경우 더 큰 영역인 정적스코프(전역 스코프) 우선으로 한다.  


    - 호이스팅
        이자를 당겨 쓰듯이 함수나 변수가 선언되지 않았더라도 미리 선언 된 것처럼 끌어서 동작하는 것을 의미한다.
        let을 사용하여 변수나 함수를 선언하면 에러가 발생하지만 var를 사용하면 에러가 발생하지 않아 나중에 처리하기가 힘들어진다.
            (값을 출력하면 출력되지는 않고 undefined로 뜬다. => 임시 메모리가 할당되었다는 의미이다. 실제 값은 존재하지 않는다.)

            변수 선언시 
                let과 const는
                1. 선언단계 -> (TDZ, Temporary Dead Zone) -> 2. 초기화단계 3. 할당 단계 를 거친다.
                    let과 const도 호스팅이 발생하지만 TDZ를 통해 호이스팅 방지.(reference error발생)

                var는
                1. 선언단계 -> 2. 초기화단계 -> 3. 할당 단계 를 거친다.

            1. 선언단계 : 선언한 변수를 식별자가 담기는 객체에 할당하는 단계
            2. 초기화단계 : 변수에 할당할 메모리 공간을 부여하는 단계
            3. 할당단계 : 정의된 변수에 데이터가 할당되는 단계, 연산자 ===를 통해 할당. (식별자 === 변수명)